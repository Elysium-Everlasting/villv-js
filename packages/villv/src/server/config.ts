import type { Override } from '../utils/override.js'

/**
 * User defined settings.
 */
export interface UserConfig {
  /**
   * Project root directory.
   * Can be an absolute path, or a path relative from the location of the config file itself.
   *
   * @default process.cwd()
   */
  root?: string

  /**
   * Base public path when served in development or production.
   *
   * @default '/'
   */
  base?: string

  /**
   * Directory to serve as plain static assets.
   * Files in this directory are served and copied to build dist dir as-is without transform.
   * The value can be either an absolute file system path or a path relative to project root.
   *
   * Set to `false` or an empty string to disable copied static assets to build dist dir.
   *
   * @default 'public'
   */
  publicDir?: string | false

  /**
   * Directory to save cache files.
   *
   * Files in this directory are pre-bundled deps or some other cache files that generated by vite,
   * which can improve the performance.
   *
   * You can use `--force` flag or manually delete the directory to regenerate the cache files.
   * The value can be either an absolute file system path or a path relative to project root.
   *
   * Defaults to `.vite` when no `package.json` is detected.
   *
   * @default 'node_modules/.vite'
   */
  cacheDir?: string

  /**
   * Explicitly set a mode to run in. This will override the default mode for
   * each command, and can be overridden by the command line --mode option.
   */
  mode?: string

  /**
   * Define global variable replacements.
   * Entries will be defined on `window` during dev and replaced during build.
   */
  define?: Record<string, any>

  /**
   * Array of vite plugins to use.
   */
  // plugins?: PluginOption[]

  /**
   * Configure resolver
   */
  // resolve?: ResolveOptions & { alias?: AliasOptions }

  /**
   * CSS related options (preprocessors and CSS modules)
   */
  // css?: CSSOptions

  /**
   * JSON loading options
   */
  // json?: JsonOptions

  /**
   * Transform options to pass to esbuild.
   * Or set to `false` to disable esbuild.
   */
  // esbuild?: ESBuildOptions | false

  /**
   * Specify additional picomatch patterns to be treated as static assets.
   */
  assetsInclude?: string | RegExp | (string | RegExp)[]

  /**
   * Server specific options, e.g. host, port, https...
   */
  // server?: ServerOptions

  /**
   * Build specific options
   */
  // build?: BuildOptions

  /**
   * Preview specific options, e.g. host, port, https...
   */
  // preview?: PreviewOptions

  /**
   * Dep optimization options
   */
  // optimizeDeps?: DepOptimizationOptions

  /**
   * SSR specific options
   */
  // ssr?: SSROptions

  /**
   * Experimental features
   *
   * Features under this field could change in the future and might NOT follow semver.
   * Please be careful and always pin Vite's version when using them.
   *
   * @experimental
   */
  // experimental?: ExperimentalOptions

  /**
   * Legacy options
   *
   * Features under this field only follow semver for patches, they could be removed in a
   * future minor version. Please always pin Vite's version to a minor when using them.
   */
  // legacy?: LegacyOptions

  /**
   * Log level.
   *
   * @default 'info'
   */
  // logLevel?: LogLevel

  /**
   * Custom logger.
   */
  // customLogger?: Logger

  /**
   * @default true
   */
  // clearScreen?: boolean

  /**
   * Environment files directory. Can be an absolute path, or a path relative from
   * root.
   * @default root
   */
  envDir?: string

  /**
   * Env variables starts with `envPrefix` will be exposed to your client source code via import.meta.env.
   * @default 'VITE_'
   */
  envPrefix?: string | string[]

  /**
   * Worker bundle options
   */
  worker?: {
    /**
     * Output format for worker bundle
     *
     * @default 'iife'
     */
    format?: 'es' | 'iife'

    /**
     * Vite plugins that apply to worker bundle
     */
    // plugins?: PluginOption[]

    /**
     * Rollup options to build worker bundle
     */
    // rollupOptions?: Omit<RollupOptions, 'plugins' | 'input' | 'onwarn' | 'preserveEntrySignatures'>
  }

  /**
   * Whether your application is a:
   * - Single Page Application (SPA),
   * - Multi-Page Application (MPA),
   * - Custom Application (SSR and frameworks with custom HTML handling)
   *
   * @default 'spa'
   */
  appType?: AppType
}

/**
 * spa (Single Page Application): include SPA fallback middleware and configure sirv with `single: true` in preview.
 *
 * mpa (Multi-Page Application): only include non-SPA HTML middlewares
 *
 * custom (SSR and frameworks with custom HTML handling): don't include HTML middlewares
 */
export type AppType = 'spa' | 'mpa' | 'custom'

export interface InternalConfig {}

export type ResolvedConfig = Override<UserConfig, InternalConfig>

export async function resolveConfig(): Promise<ResolvedConfig> {
  const resolvedConfig: ResolvedConfig = {} as ResolvedConfig

  return resolvedConfig
}
