import type { RollupOptions, Plugin as RollupPlugin } from 'rollup'
import type { BuildOptions as ESBuildOptions, LogLevel } from 'esbuild'
import { ENV_PREFIX } from './constants.js'
import type { Logger } from './logger.js'

export interface Plugin extends RollupPlugin {}

export type UserConfig = {
  /**
   * Project root directory.
   *
   * Can be an absolute path, or a path relative from the location of the config file itself.
   *
   * @default process.cwd()
   */
  root?: string

  /**
   * Base public path when served in development or production.
   *
   * @default '/'
   */
  base?: string

  /**
   * Directory to serve as plain static assets.
   *
   * Files in this directory are served and copied to build dist dir as-is without transform.
   * The value can be either an absolute file system path or a path relative to project root.
   *
   * Set to `false` or an empty string to disable copied static assets to build dist dir.
   *
   * @default 'public'
   */
  publicDirectory?: string | false

  /**
   * Directory to save cache files.
   *
   * Files in this directory are pre-bundled deps or some other cache files
   * that generated by vite, which can improve the performance.
   *
   * You can use `--force` flag or manually delete the directory to regenerate the cache files.
   * The value can be either an absolute file system path or a path relative to project root.
   *
   * Default to `.vite` when no `package.json` is detected.
   *
   * @default 'node_modules/.vite'
   */
  cacheDirectory?: string

  /**
   * Explicitly set a mode to run in.
   *
   * This will override the default mode for each command,
   * and can be overridden by the command line --mode option.
   */
  mode?: string

  /**
   * Define global variable replacements.
   *
   * Entries will be defined on `window` during dev and replaced during build.
   */
  define?: Record<PropertyKey, any>

  /**
   * Array of vite plugins to use.
   */
  plugins?: PluginOption[]

  /**
   * Configure resolver
   *
   * TODO
   */
  resolve?: any // ResolveOptions & { alias?: AliasOptions }

  /**
   * CSS related options (preprocessors and CSS modules)
   *
   * TODO
   */
  css?: any // CSSOptions

  /**
   * JSON loading options
   *
   * TODO
   */
  json?: any // JsonOptions

  /**
   * Transform options to pass to esbuild.
   * Or set to `false` to disable esbuild.
   */
  esbuild?: ESBuildOptions | false

  /**
   * Specify additional picomatch patterns to be treated as static assets.
   */
  assetsInclude?: string | RegExp | (string | RegExp)[]

  /**
   * Server specific options, e.g. host, port, https...
   *
   * TODO
   */
  server?: any // ServerOptions

  /**
   * Build specific options
   *
   * TODO
   */
  build?: any // BuildOptions

  /**
   * Preview specific options, e.g. host, port, https...
   *
   * TODO
   */
  preview?: any // PreviewOptions

  /**
   * Dep optimization options
   *
   * TODO
   */
  optimizeDeps?: any // DepOptimizationOptions

  /**
   * SSR specific options
   *
   * TODO
   */
  ssr?: any // SSROptions

  /**
   * Experimental features
   *
   * Features under this field could change in the future and might NOT follow semver.
   * Please be careful and always pin Vite's version when using them.
   *
   * @experimental
   */
  experimental?: ExperimentalOptions

  /**
   * Legacy options.
   *
   * Features under this field only follow semver for patches,
   * they could be removed in a future minor version.
   *
   * Please always pin Vite's version to a minor when using them.
   */
  legacy?: LegacyOptions

  /**
   * Log level.
   *
   * @default 'info'
   */
  logLevel?: LogLevel

  /**
   * Custom logger.
   */
  customLogger?: Logger

  /**
   * @default true
   */
  clearScreen?: boolean

  /**
   * Environment files directory.
   *
   * Can be an absolute path, or a path relative from root.
   *
   * @default root
   */
  envDirectory?: string

  /**
   * Env variables starts with `envPrefix` will be exposed to your client source code via import.meta.env.
   *
   * @default {@link ENV_PREFIX}
   */
  envPrefix?: string

  /**
   * Worker bundle options.
   */
  worker?: WorkerBundleOptions

  /**
   * Whether your application is a:
   * - Single Page Application (SPA)
   * - Multi-Page Application (MPA)
   * - Custom Application (SSR and frameworks with custom HTML handling)
   *
   * @default 'spa'
   */
  appType?: AppType
}

export type ResolvedConfig = {
  cacheDirectory: string
}

/**
 * Environment that the config is being executed in.
 */
export interface ConfigEnv {
  /**
   * The command used to invoke the config.
   */
  command: ConfigCommand

  /**
   * @example 'prod', 'local'
   */
  mode: string

  /**
   * @experimental
   */
  ssrBuild?: boolean
}

export interface WorkerBundleOptions {
  /**
   * Output format for worker bundle
   * @default 'iife'
   */
  format?: WorkerBundleFormat

  /**
   * Vite plugins that apply to worker bundle
   */
  plugins?: PluginOption[]

  /**
   * Rollup options to build worker bundle
   */
  rollupOptions?: Omit<RollupOptions, 'plugins' | 'input' | 'onwarn' | 'preserveEntrySignatures'>
}

export type WorkerBundleFormat = 'es' | 'iife'

export type ConfigCommand = 'build' | 'server'

/**
 * spa: Include SPA fallback middleware and configure sirv with `single: true` in preview.
 *
 * mpa: Only include non-SPA HTML middlewares.
 *
 * custom: Don't include HTML middlewares.
 */
export type AppType = 'spa' | 'mpa' | 'custom'

export type UserConfigFn = (env: ConfigEnv) => UserConfig | Promise<UserConfig>

export type UserConfigExport = ReturnType<UserConfigFn> | UserConfigFn

export type PluginOption =
  | Plugin
  | false
  | null
  | undefined
  | PluginOption[]
  | Promise<PluginOption>

/**
 * TODO
 */
export interface LegacyOptions {}

/**
 * TODO
 */
export interface ExperimentalOptions {}

/**
 * Type helper to make it easier to use vite.config.ts
 *
 * Accepts a direct {@link UserConfig} object, or a function that returns it.
 *
 * The function receives a {@link ConfigEnv} object.
 */
export function defineConfig<T extends UserConfigExport>(config: T): T {
  return config
}
